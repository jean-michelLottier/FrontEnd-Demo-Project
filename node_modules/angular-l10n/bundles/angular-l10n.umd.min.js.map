{"version":3,"file":"angular-l10n.umd.min.js","sources":["../../src/models/validation/number-code.ts","../../src/models/validation/decimal-code.ts","../../src/services/locale-validation.ts","../../src/services/collator.ts","../../src/pipes/translate.pipe.ts","../../src/pipes/locale-date.pipe.ts","../../src/pipes/locale-number.pipe.ts","../../src/models/bfs.ts","../../src/models/base-directive.ts","../../src/directives/translate.directive.ts","../../src/directives/locale-date.directive.ts","../../src/directives/locale-number.directive.ts","../../src/directives/locale-number-validator.directive.ts","../../src/modules/translation.module.ts","../../src/modules/localization.module.ts","../../src/modules/locale-validation.module.ts","../../src/decorators/language.decorator.ts","../../src/decorators/default-locale.decorator.ts","../../src/decorators/currency.decorator.ts","../../src/models/injector-ref.ts","../../src/models/localization/locale-config.ts","../../src/models/localization/locale-config-api.ts","../../src/services/locale-storage.ts","../../src/models/localization/default-locale.ts","../../src/services/locale.service.ts","../../src/models/translation/translation-config.ts","../../src/services/intl-api.ts","../../src/models/translation/translation-config-api.ts","../../src/services/translation-provider.ts","../../src/services/translation-handler.ts","../../src/models/types.ts","../../src/services/translation.service.ts","../../src/services/translation.ts","../../src/services/localization.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleService } from '../../services/locale.service';\r\nimport { IntlAPI } from '../../services/intl-api';\n/**\n * @abstract\n */\nexport abstract class NumberCode {\n/**\n * @return {?}\n */\nprotected get numberCodes(): string[] {\r\n        const /** @type {?} */ numberCodes: string[] = [];\r\n\r\n        for (let /** @type {?} */ num: number = 0; num <= 9; num++) {\r\n            numberCodes.push(this.toUnicode(num.toString()));\r\n        }\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            for (let /** @type {?} */ num: number = 0; num <= 9; num++) {\r\n                numberCodes[num] = this.toUnicode(\r\n                    new Intl.NumberFormat(this.locale.getDefaultLocale()).format(num)\r\n                );\r\n            }\r\n        }\r\n        return numberCodes;\r\n    }\n/**\n * @param {?} locale\n */\nconstructor(protected locale: LocaleService) { }\n/**\n * @abstract\n * @param {?} s\n * @return {?}\n */\nparse(s: string) {}\n/**\n * @abstract\n * @param {?} digits\n * @return {?}\n */\ngetRegExp(digits: string) {}\n/**\n * @param {?} pattern\n * @return {?}\n */\nprotected toChar(pattern: string): string {\r\n        return pattern.replace(/\\\\u[\\dA-F]{4}/gi, (match: string) => {\r\n            return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\r\n        });\r\n    }\n/**\n * @param {?} c\n * @return {?}\n */\nprotected toUnicode(c: string): string {\r\n        return \"\\\\u\" + this.toHex(c.charCodeAt(0));\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate toHex(value: number): string {\r\n        let /** @type {?} */ hex: string = value.toString(16).toUpperCase();\r\n        // With padding.\r\n        hex = \"0000\".substr(0, 4 - hex.length) + hex;\r\n        return hex;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\n}\n\nfunction NumberCode_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberCode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberCode.ctorParameters;\n/** @type {?} */\nNumberCode.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NumberCode } from './number-code';\r\nimport { LocaleService } from '../../services/locale.service';\r\nimport { IntlAPI } from '../../services/intl-api';\r\nimport { Decimal } from '../types';\nexport class DecimalCode extends NumberCode {\n/**\n * @return {?}\n */\nprotected get decimalCodes(): Decimal {\r\n        let /** @type {?} */ decimalCodes: Decimal = {\r\n            minusSign: this.toUnicode(\"-\"),\r\n            decimalSeparator: this.toUnicode(\".\"),\r\n            thousandSeparator: this.toUnicode(\",\")\r\n        };\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ value: number = -1000.9; // Reference value.\r\n            const /** @type {?} */ localeValue: string = new Intl.NumberFormat(this.locale.getDefaultLocale()).format(value);\r\n\r\n            const /** @type {?} */ unicodeChars: string[] = [];\r\n            for (let /** @type {?} */ i: number = 0; i <= 7; i++) {\r\n                unicodeChars.push(this.toUnicode(localeValue.charAt(i)));\r\n            }\r\n\r\n            // Right to left:\r\n            // checks Unicode characters 'RIGHT-TO-LEFT MARK' (U+200F) & 'Arabic Letter Mark' (U+061C),\r\n            // or the reverse order.\r\n            // Left to right:\r\n            // checks Unicode character 'LEFT-TO-RIGHT MARK' (U+200E).\r\n            if (unicodeChars[0] == \"\\\\u200F\" || unicodeChars[0] == \"\\\\u061C\") {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[1],\r\n                    decimalSeparator: unicodeChars[7],\r\n                    thousandSeparator: unicodeChars[3]\r\n                };\r\n            } else if (unicodeChars[0] == this.toUnicode(\r\n                new Intl.NumberFormat(this.locale.getDefaultLocale()).format(1))\r\n            ) {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[7],\r\n                    decimalSeparator: unicodeChars[5],\r\n                    thousandSeparator: unicodeChars[1]\r\n                };\r\n            } else if (unicodeChars[0] == \"\\\\u200E\") {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[1],\r\n                    decimalSeparator: unicodeChars[7],\r\n                    thousandSeparator: unicodeChars[3]\r\n                };\r\n            } else {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[0],\r\n                    decimalSeparator: unicodeChars[6],\r\n                    thousandSeparator: unicodeChars[2]\r\n                };\r\n            }\r\n        }\r\n        return decimalCodes;\r\n    }\n/**\n * @param {?} locale\n */\nconstructor(protected locale: LocaleService) {\r\n        super(locale);\r\n    }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parse(s: string): number {\r\n        let /** @type {?} */ value: string = \"\";\r\n\r\n        const /** @type {?} */ decimalCodes: Decimal = this.decimalCodes;\r\n\r\n        const /** @type {?} */ characters: string[] = s.split(\"\");\r\n        for (const /** @type {?} */ char of characters) {\r\n            const /** @type {?} */ charCode: string = this.toUnicode(char);\r\n            const /** @type {?} */ index: number = this.numberCodes.indexOf(charCode);\r\n            if (index != -1) {\r\n                value += index;\r\n            } else if (charCode == decimalCodes.minusSign) {\r\n                value += \"-\";\r\n            } else if (charCode == decimalCodes.decimalSeparator) {\r\n                value += \".\";\r\n            } else if (charCode == decimalCodes.thousandSeparator) {\r\n                continue;\r\n            } else { return NaN; }\r\n        }\r\n        return parseFloat(value);\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\npublic getRegExp(digits: string): RegExp {\r\n        let /** @type {?} */ minInt: number = 1;\r\n        let /** @type {?} */ minFraction: number = 0;\r\n        let /** @type {?} */ maxFraction: number = 3;\r\n\r\n        if (!!digits) {\r\n            const /** @type {?} */ NUMBER_FORMAT_REGEXP: RegExp = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/;\r\n            const /** @type {?} */ parts: RegExpMatchArray | null = digits.match(NUMBER_FORMAT_REGEXP);\r\n            if (parts != null) {\r\n                if (parts[1] != null) {  // Min integer digits.\r\n                    minInt = parseInt(parts[1]);\r\n                }\r\n                if (parts[3] != null) {  // Min fraction digits.\r\n                    minFraction = parseInt(parts[3]);\r\n                }\r\n                if (parts[5] != null) {  // Max fraction digits.\r\n                    maxFraction = parseInt(parts[5]);\r\n                }\r\n            }\r\n        }\r\n\r\n        const /** @type {?} */ minusSign: string = this.decimalCodes.minusSign;\r\n        const /** @type {?} */ zero: string = this.numberCodes[0];\r\n        const /** @type {?} */ decimalSeparator: string = this.decimalCodes.decimalSeparator;\r\n        const /** @type {?} */ thousandSeparator: string = this.decimalCodes.thousandSeparator;\r\n        const /** @type {?} */ nine: string = this.numberCodes[9];\r\n\r\n        // Pattern for 1.2-2 digits: /^-?[0-9,]{1,}\\.[0-9]{2,2}$/\r\n        // Unicode pattern = \"^\\u002d?[\\u0030-\\u0039,\\u002c]{1,}\\\\u002e[\\u0030-\\u0039]{2,2}$\"\r\n        let /** @type {?} */ pattern: string;\r\n        if (minFraction > 0 && maxFraction > 0) {\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n        } else if (minFraction == 0 && maxFraction > 0) {\r\n            // Decimal separator is optional.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n        } else {\r\n            // Integer number.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}$\";\r\n        }\r\n        pattern = this.toChar(pattern);\r\n        const /** @type {?} */ regExp: RegExp = new RegExp(pattern);\r\n        return regExp;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\n}\n\nfunction DecimalCode_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalCode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalCode.ctorParameters;\n/** @type {?} */\nDecimalCode.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DecimalCode } from '../models/validation/decimal-code';\r\n\r\n/**\r\n * Provides the methods to convert strings according to default locale.\r\n */\r\nexport interface ILocaleValidation {\r\n\r\n    /**\r\n     * Converts a string to a number according to default locale.\r\n     * If the string cannot be converted to a number, returns NaN.\r\n     */\r\n    parseNumber(s: string): number | null;\r\n\r\n}\nexport class LocaleValidation implements ILocaleValidation {\n/**\n * @param {?} decimalCode\n */\nconstructor(private decimalCode: DecimalCode) { }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parseNumber(s: string): number | null {\r\n        if (s == \"\") {\r\n            return null;\r\n        }\r\n        return this.decimalCode.parse(s);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DecimalCode, },\n];\n}\n\nfunction LocaleValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleValidation.ctorParameters;\n/** @type {?} */\nLocaleValidation.prototype.decimalCode;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LocaleService } from './locale.service';\r\nimport { TranslationService } from './translation.service';\r\nimport { IntlAPI } from './intl-api';\r\n\r\n/**\r\n * Intl.Collator APIs.\r\n */\r\nexport interface ICollator {\r\n\r\n    /**\r\n     * Compares two keys by the value of translation according to the current language.\r\n     * @param key1, key2 The keys of the values to compare\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return A negative value if the value of translation of key1 comes before the value of translation of key2;\r\n     *         a positive value if key1 comes after key2;\r\n     *         0 if they are considered equal or Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    compare(\r\n        key1: string,\r\n        key2: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): number;\r\n\r\n    /**\r\n     * Sorts an array of objects or an array of arrays according to the current language.\r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return The same sorted list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    sort(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): any[];\r\n\r\n    /**\r\n     * Sorts asynchronously an array of objects or an array of arrays according to the current language.\r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return An observable of the sorted list or of the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    sortAsync(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): Observable<any[]>;\r\n\r\n    /**\r\n     * Matches a string into an array of objects or an array of arrays\r\n     * according to the current language.\r\n     * @param s The string to search\r\n     * @param list The array in which to search\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options Default is { usage: 'search' }\r\n     * @return A filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    search(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options?: any\r\n    ): any[];\r\n\r\n    /**\r\n     * Matches asynchronously a string into an array of objects or an array of arrays\r\n     * according to the current language.\r\n     * @param s The string to search\r\n     * @param list The array in which to search\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options Default is { usage: 'search' }\r\n     * @return An observable of the filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    searchAsync(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options?: any\r\n    ): Observable<any[]>;\r\n\r\n}\nexport class Collator implements ICollator {\n/**\n * @param {?} locale\n * @param {?} translation\n */\nconstructor(private locale: LocaleService,\nprivate translation: TranslationService) { }\n/**\n * @param {?} key1\n * @param {?} key2\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic compare(\r\n        key1: string,\r\n        key2: string,\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): number {\r\n        if (!IntlAPI.hasCollator()) {\r\n            return 0;\r\n        }\r\n\r\n        const /** @type {?} */ value1: string = this.translation.translate(key1);\r\n        const /** @type {?} */ value2: string = this.translation.translate(key2);\r\n\r\n        const /** @type {?} */ locale: string = this.addExtension(\r\n            this.locale.getCurrentLocale(),\r\n            extension\r\n        );\r\n        return new Intl.Collator(locale, options).compare(value1, value2);\r\n    }\n/**\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sort(\r\n        list: any[],\r\n        keyName: any,\r\n        order: string = \"asc\",\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): any[] {\r\n        if (!list || !keyName || !IntlAPI.hasCollator()) {\r\n            return list;\r\n        }\r\n\r\n        list.sort((key1: any, key2: any) => {\r\n            return this.compare(key1[keyName], key2[keyName], extension, options);\r\n        });\r\n\r\n        if (order == \"desc\") {\r\n            list.reverse();\r\n        }\r\n        return list;\r\n    }\n/**\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sortAsync(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): Observable<any[]> {\r\n        return Observable.create((observer: Observer<any[]>) => {\r\n            observer.next(this.sort(list, keyName, order, extension, options));\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic search(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options: any = { usage: 'search' }\r\n    ): any[] {\r\n        if (!list || !keyNames || s == \"\" || s == null || !IntlAPI.hasCollator()) {\r\n            return list;\r\n        }\r\n\r\n        const /** @type {?} */ locale: string = this.locale.getCurrentLocale();\r\n        const /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n        const /** @type {?} */ matches: any[] = list.filter((key: any) => {\r\n            let /** @type {?} */ found: boolean = false;\r\n            for (let /** @type {?} */ i: number = 0; i < keyNames.length; i++) {\r\n                if (this.match(key[keyNames[i]], s, collator)) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            return found;\r\n        });\r\n        return matches;\r\n    }\n/**\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic searchAsync(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options: any = { usage: 'search' }\r\n    ): Observable<any[]> {\r\n        return Observable.create((observer: Observer<any[]>) => {\r\n            observer.next(this.search(s, list, keyNames, options));\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} locale\n * @param {?=} extension\n * @return {?}\n */\nprivate addExtension(locale: string, extension?: string): string {\r\n        if (!!extension) {\r\n            locale = locale + \"-u-\" + extension;\r\n        }\r\n        return locale;\r\n    }\n/**\n * @param {?} key\n * @param {?} s\n * @param {?} collator\n * @return {?}\n */\nprivate match(key: string, s: string, collator: Intl.Collator): boolean {\r\n        const /** @type {?} */ value: string = this.translation.translate(key);\r\n        const /** @type {?} */ valueLength: number = value.length;\r\n        const /** @type {?} */ sLength: number = s.length;\r\n\r\n        if (sLength > valueLength) {\r\n            return false;\r\n        }\r\n        if (sLength == valueLength) {\r\n            return collator.compare(value, s) == 0;\r\n        }\r\n\r\n        let /** @type {?} */ found: boolean = false;\r\n        for (let /** @type {?} */ i: number = 0; i < valueLength - (sLength - 1); i++) {\r\n            const /** @type {?} */ str: string = value.substr(i, sLength);\r\n            if (collator.compare(str, s) == 0) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationService, },\n];\n}\n\nfunction Collator_tsickle_Closure_declarations() {\n/** @type {?} */\nCollator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCollator.ctorParameters;\n/** @type {?} */\nCollator.prototype.locale;\n/** @type {?} */\nCollator.prototype.translation;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { TranslationService } from '../services/translation.service';\nexport class TranslatePipe implements PipeTransform {\n/**\n * @param {?} translation\n */\nconstructor(protected translation: TranslationService) { }\n/**\n * @param {?} key\n * @param {?} lang\n * @param {?=} args\n * @return {?}\n */\npublic transform(key: string, lang: string, args?: any): string {\r\n        return this.translation.translate(key, args, lang);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'translate',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n];\n}\n\nfunction TranslatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslatePipe.ctorParameters;\n/** @type {?} */\nTranslatePipe.prototype.translation;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport { IntlAPI } from '../services/intl-api';\nexport class LocaleDatePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} pattern\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, pattern: string = 'mediumDate'): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasDateTimeFormat()) {\r\n            const /** @type {?} */ localeDate: DatePipe = new DatePipe(defaultLocale);\r\n            return localeDate.transform(value, pattern);\r\n        }\r\n        // Returns the date without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDate',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDatePipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';\r\n\r\nimport { IntlAPI } from '../services/intl-api';\nexport class LocaleDecimalPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits?: string): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localeDecimal: DecimalPipe = new DecimalPipe(defaultLocale);\r\n            return localeDecimal.transform(value, digits);\r\n        }\r\n        // Returns the number without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDecimal',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalPipe.ctorParameters;\n}\n\nexport class LocalePercentPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits?: string): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localePercent: PercentPipe = new PercentPipe(defaultLocale);\r\n            return localePercent.transform(value, digits);\r\n        }\r\n        // Returns the number without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localePercent',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalePercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentPipe.ctorParameters;\n}\n\nexport class LocaleCurrencyPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?} currency\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\npublic transform(\r\n        value: any,\r\n        defaultLocale: string,\r\n        currency: string,\r\n        symbolDisplay: boolean = false,\r\n        digits?: string\r\n    ): string | null {\r\n        if (typeof defaultLocale === \"undefined\" || typeof currency === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localeCurrency: CurrencyPipe = new CurrencyPipe(defaultLocale);\r\n            return localeCurrency.transform(value, currency, symbolDisplay, digits);\r\n        }\r\n        // Returns the number & currency without localization.\r\n        return value + \" \" + currency;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeCurrency',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyPipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Breadth First Search (BFS) algorithm for traversing & searching tree data structure of DOM\n * explores the neighbor nodes first, before moving to the next level neighbors.\n * Time complexity: between O(1) and O(|V|^2).\n */\nexport class BFS {\nprivate static readonly SELECTOR: RegExp = /^l10n|translate|locale/;\nprivate static readonly MAX_DEPTH: number = 10;\n/**\n * Target node is a non empty text node.\n * @param {?} rootNode\n * @return {?}\n */\npublic static getTargetNode(rootNode: any): any {\n        return this.walk(rootNode);\n    }\n/**\n * @param {?} rootNode\n * @return {?}\n */\nprivate static walk(rootNode: any): any {\n        const /** @type {?} */ queue: any[] = [];\n\n        let /** @type {?} */ iNode: any;\n        let /** @type {?} */ depth: number = 0;\n        let /** @type {?} */ nodeToDepthIncrease: number = 1;\n\n        queue.push(rootNode);\n        while (queue.length > 0 && depth <= this.MAX_DEPTH) {\n            iNode = queue.shift();\n            if (this.isTargetNode(iNode)) {\n                return iNode;\n            }\n            if (depth < this.MAX_DEPTH && iNode.childNodes != null) {\n                for (const /** @type {?} */ child of iNode.childNodes) {\n                    if (this.isValidNode(child)) {\n                        queue.push(child);\n                    }\n                }\n            }\n            if (--nodeToDepthIncrease == 0) {\n                depth++;\n                nodeToDepthIncrease = queue.length;\n            }\n        }\n        return rootNode;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate static isTargetNode(node: any): boolean {\n        return typeof node !== \"undefined\" &&\n            node.nodeType == 3 &&\n            node.nodeValue != null &&\n            node.nodeValue.trim() != \"\";\n    }\n/**\n * A valid node is not marked for translation.\n * @param {?} node\n * @return {?}\n */\nprivate static isValidNode(node: any): boolean {\n        if (typeof node !== \"undefined\" && node.nodeType == 1 && node.attributes) {\n            for (const /** @type {?} */ attr of node.attributes) {\n                if (this.SELECTOR.test(attr.name)) return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction BFS_tsickle_Closure_declarations() {\n/** @type {?} */\nBFS.SELECTOR;\n/** @type {?} */\nBFS.MAX_DEPTH;\n}\n\n","import {\n    ElementRef,\n    Input,\n    Renderer2,\n    AfterViewInit,\n    OnChanges,\n    SimpleChanges,\n    OnDestroy\n} from '@angular/core';\nimport { ISubscription } from 'rxjs/Subscription';\n\nimport { BFS } from './bfs';\n/**\n * @abstract\n */\nexport abstract class BaseDirective implements AfterViewInit, OnChanges, OnDestroy {\npublic valueAttribute: string;\npublic innerHTMLProperty: string;\n\n    protected key: string;\n    protected attributes: any[] = [];\n\n    protected subscriptions: ISubscription[] = [];\nprivate element: any;\nprivate renderNode: any;\nprivate nodeValue: string;\nprivate textObserver: MutationObserver;\nprivate readonly TEXT_MUTATION_CONFIG: any = { subtree: true, characterData: true };\nprivate readonly SELECTOR: RegExp = /^l10n-/;\n/**\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected el: ElementRef, protected renderer: Renderer2) { }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        if (this.el && this.el.nativeElement) {\n            this.element = this.el.nativeElement;\n            this.renderNode = BFS.getTargetNode(this.element);\n            this.getKey();\n            this.getAttributes();\n            this.addTextListener();\n            this.setup();\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\n        if (!!this.key) {\n            if (this.nodeValue == null || this.nodeValue == \"\") {\n                if (!!this.valueAttribute) {\n                    this.key = this.valueAttribute;\n                } else if (!!this.innerHTMLProperty) {\n                    this.key = this.innerHTMLProperty;\n                }\n            }\n            this.replaceText();\n        }\n        if (this.attributes.length > 0) {\n            this.replaceAttributes();\n        }\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.removeTextListener();\n        this.cancelSubscriptions();\n    }\n/**\n * @abstract\n * @return {?}\n */\nsetup() {}\n/**\n * @abstract\n * @return {?}\n */\nreplace() {}\n/**\n * @abstract\n * @return {?}\n */\nreplaceText() {}\n/**\n * @abstract\n * @return {?}\n */\nreplaceAttributes() {}\n/**\n * @return {?}\n */\nprotected getAttributesData(): any {\n        const /** @type {?} */ keys: string[] = this.getAttributesKeys();\n        const /** @type {?} */ data: any = {};\n        for (const /** @type {?} */ key of keys) {\n            data[key] = this.getValues(key);\n        }\n        return data;\n    }\n/**\n * @return {?}\n */\nprotected getAttributesKeys(): string[] {\n        return this.attributes.map((attr: any) => attr.key);\n    }\n/**\n * @abstract\n * @param {?} keys\n * @return {?}\n */\ngetValues(keys: string | string[]) {}\n/**\n * @param {?} value\n * @return {?}\n */\nprotected setText(value: string): void {\n        if (!!value) {\n            if (!!this.nodeValue && !!this.key) {\n                this.removeTextListener();\n                this.renderer.setValue(this.renderNode, this.nodeValue.replace(this.key, value));\n                this.addTextListener();\n            } else if (!!this.valueAttribute) {\n                this.renderer.setAttribute(this.element, \"value\", value);\n            } else if (!!this.innerHTMLProperty) {\n                this.renderer.setProperty(this.element, \"innerHTML\", value);\n            }\n        }\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprotected setAttributes(data: any): void {\n        for (const /** @type {?} */ attr of this.attributes) {\n            this.renderer.setAttribute(this.element, attr.name, data[attr.key]);\n        }\n    }\n/**\n * @return {?}\n */\nprivate addTextListener(): void {\n        if (typeof MutationObserver !== \"undefined\") {\n            this.textObserver = new MutationObserver((mutations: MutationRecord[]) => {\n                this.renderNode = BFS.getTargetNode(this.element);\n                this.getKey();\n                this.replaceText();\n            });\n            this.textObserver.observe(this.renderNode, this.TEXT_MUTATION_CONFIG);\n        }\n    }\n/**\n * @return {?}\n */\nprivate removeTextListener(): void {\n        if (typeof this.textObserver !== \"undefined\") {\n            this.textObserver.disconnect();\n        }\n    }\n/**\n * @return {?}\n */\nprivate getText(): string {\n        this.nodeValue = this.renderNode != null ? /** @type {?} */(( this.renderNode.nodeValue as string)) : \"\";\n        return !!this.nodeValue ? this.nodeValue.trim() : \"\";\n    }\n/**\n * @return {?}\n */\nprivate getKey(): void {\n        if (this.element.childNodes.length > 0) {\n            this.key = this.getText();\n        } else if (!!this.valueAttribute) {\n            this.key = this.valueAttribute;\n        } else if (!!this.innerHTMLProperty) {\n            this.key = this.innerHTMLProperty;\n        }\n    }\n/**\n * @return {?}\n */\nprivate getAttributes(): void {\n        if (this.element.attributes) {\n            for (const /** @type {?} */ attr of this.element.attributes) {\n                if (this.SELECTOR.test(attr.name)) {\n                    const /** @type {?} */ name: string = attr.name.substr(5);\n                    for (const /** @type {?} */ targetAttr of this.element.attributes) {\n                        if (new RegExp(\"^\" + name + \"$\").test(targetAttr.name)) {\n                            this.attributes.push({ name: name, key: targetAttr.value });\n                        }\n                    }\n                }\n            }\n        }\n    }\n/**\n * @return {?}\n */\nprivate cancelSubscriptions(): void {\n        this.subscriptions.forEach((subscription: ISubscription) => {\n            if (typeof subscription !== \"undefined\") {\n                subscription.unsubscribe();\n            }\n        });\n    }\n\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'valueAttribute': [{ type: Input, args: ['value', ] },],\n'innerHTMLProperty': [{ type: Input, args: ['innerHTML', ] },],\n};\n}\n\nfunction BaseDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseDirective.propDecorators;\n/** @type {?} */\nBaseDirective.prototype.valueAttribute;\n/** @type {?} */\nBaseDirective.prototype.innerHTMLProperty;\n/** @type {?} */\nBaseDirective.prototype.key;\n/** @type {?} */\nBaseDirective.prototype.attributes;\n/** @type {?} */\nBaseDirective.prototype.subscriptions;\n/** @type {?} */\nBaseDirective.prototype.element;\n/** @type {?} */\nBaseDirective.prototype.renderNode;\n/** @type {?} */\nBaseDirective.prototype.nodeValue;\n/** @type {?} */\nBaseDirective.prototype.textObserver;\n/** @type {?} */\nBaseDirective.prototype.TEXT_MUTATION_CONFIG;\n/** @type {?} */\nBaseDirective.prototype.SELECTOR;\n/** @type {?} */\nBaseDirective.prototype.el;\n/** @type {?} */\nBaseDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { BaseDirective } from '../models/base-directive';\nexport class TranslateDirective extends BaseDirective {\n/**\n * @param {?} params\n * @return {?}\n */\nset l10nTranslate(params: string) {\r\n        this.params = params;\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nset translate(params: string) {\r\n        this.params = params;\r\n    }\nprivate params: string;\n/**\n * @param {?} translation\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected translation: TranslationService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.translation.translationChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            const /** @type {?} */ keys: string[] = this.getAttributesKeys();\r\n            this.setAttributes(this.getValues(keys));\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.translation.translate(keys, this.params);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nTranslate],[translate]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nTranslate': [{ type: Input },],\n'translate': [{ type: Input },],\n};\n}\n\nfunction TranslateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateDirective.ctorParameters;\n/** @type {?} */\nTranslateDirective.propDecorators;\n/** @type {?} */\nTranslateDirective.prototype.params;\n/** @type {?} */\nTranslateDirective.prototype.translation;\n/** @type {?} */\nTranslateDirective.prototype.el;\n/** @type {?} */\nTranslateDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { BaseDirective } from '../models/base-directive';\r\nimport { LocaleDatePipe } from '../pipes/locale-date.pipe';\nexport class LocaleDateDirective extends BaseDirective {\n/**\n * @param {?} pattern\n * @return {?}\n */\nset l10nDate(pattern: string) {\r\n        this.pattern = pattern;\r\n    }\n/**\n * @param {?} pattern\n * @return {?}\n */\nset localeDate(pattern: string) {\r\n        this.pattern = pattern;\r\n    }\nprivate pattern: string;\nprivate defaultPattern: string = 'mediumDate';\nprivate localeDatePipe: LocaleDatePipe = new LocaleDatePipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeDatePipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.pattern || this.defaultPattern\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nDate],[localeDate]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nDate': [{ type: Input },],\n'localeDate': [{ type: Input },],\n};\n}\n\nfunction LocaleDateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDateDirective.ctorParameters;\n/** @type {?} */\nLocaleDateDirective.propDecorators;\n/** @type {?} */\nLocaleDateDirective.prototype.pattern;\n/** @type {?} */\nLocaleDateDirective.prototype.defaultPattern;\n/** @type {?} */\nLocaleDateDirective.prototype.localeDatePipe;\n/** @type {?} */\nLocaleDateDirective.prototype.locale;\n/** @type {?} */\nLocaleDateDirective.prototype.el;\n/** @type {?} */\nLocaleDateDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { BaseDirective } from '../models/base-directive';\r\nimport { LocaleDecimalPipe, LocalePercentPipe, LocaleCurrencyPipe } from '../pipes/locale-number.pipe';\nexport class LocaleDecimalDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nDecimal(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localeDecimal(digits: string) {\r\n        this.digits = digits;\r\n    }\nprivate digits: string;\nprivate localeDecimalPipe: LocaleDecimalPipe = new LocaleDecimalPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeDecimalPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nDecimal],[localeDecimal]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nDecimal': [{ type: Input },],\n'localeDecimal': [{ type: Input },],\n};\n}\n\nfunction LocaleDecimalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalDirective.ctorParameters;\n/** @type {?} */\nLocaleDecimalDirective.propDecorators;\n/** @type {?} */\nLocaleDecimalDirective.prototype.digits;\n/** @type {?} */\nLocaleDecimalDirective.prototype.localeDecimalPipe;\n/** @type {?} */\nLocaleDecimalDirective.prototype.locale;\n/** @type {?} */\nLocaleDecimalDirective.prototype.el;\n/** @type {?} */\nLocaleDecimalDirective.prototype.renderer;\n}\n\nexport class LocalePercentDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nPercent(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localePercent(digits: string) {\r\n        this.digits = digits;\r\n    }\nprivate digits: string;\nprivate localePercentPipe: LocalePercentPipe = new LocalePercentPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localePercentPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nPercent],[localePercent]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nPercent': [{ type: Input },],\n'localePercent': [{ type: Input },],\n};\n}\n\nfunction LocalePercentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentDirective.ctorParameters;\n/** @type {?} */\nLocalePercentDirective.propDecorators;\n/** @type {?} */\nLocalePercentDirective.prototype.digits;\n/** @type {?} */\nLocalePercentDirective.prototype.localePercentPipe;\n/** @type {?} */\nLocalePercentDirective.prototype.locale;\n/** @type {?} */\nLocalePercentDirective.prototype.el;\n/** @type {?} */\nLocalePercentDirective.prototype.renderer;\n}\n\nexport class LocaleCurrencyDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nCurrency(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localeCurrency(digits: string) {\r\n        this.digits = digits;\r\n    }\npublic symbol: boolean;\nprivate digits: string;\nprivate localeCurrencyPipe: LocaleCurrencyPipe = new LocaleCurrencyPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n        this.subscriptions.push(this.locale.currencyCodeChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeCurrencyPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.locale.getCurrentCurrency(),\r\n            this.symbol,\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nCurrency],[localeCurrency]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nCurrency': [{ type: Input },],\n'localeCurrency': [{ type: Input },],\n'symbol': [{ type: Input },],\n};\n}\n\nfunction LocaleCurrencyDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyDirective.ctorParameters;\n/** @type {?} */\nLocaleCurrencyDirective.propDecorators;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.symbol;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.digits;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.localeCurrencyPipe;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.locale;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.el;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef, Input, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, FormControl, Validator } from '@angular/forms';\n\nimport { LocaleService } from '../services/locale.service';\nimport { DecimalCode } from '../models/validation/decimal-code';\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.\n * @param {?} digits The format of the number\n * @param {?=} MIN_VALUE The minimum value for the number\n * @param {?=} MAX_VALUE The maximum value for the number\n * @return {?} An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid\n */\nexport function validateLocaleNumber(\n    digits: string,\n    MIN_VALUE: number = Number.MIN_VALUE,\n    MAX_VALUE: number = Number.MAX_VALUE\n): Function {\n\n    const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\n    const /** @type {?} */ decimalCode: DecimalCode = InjectorRef.get(DecimalCode);\n\n    let /** @type {?} */ defaultLocale: string;\n    let /** @type {?} */ NUMBER_REGEXP: RegExp;\n\n    return (formControl: FormControl): { [key: string]: any } | null => {\n        if (formControl.value == null || formControl.value == \"\") return null;\n\n        if (defaultLocale != locale.getDefaultLocale()) {\n            NUMBER_REGEXP = decimalCode.getRegExp(digits);\n            defaultLocale = locale.getDefaultLocale();\n        }\n\n        if (NUMBER_REGEXP.test(formControl.value)) {\n            const /** @type {?} */ parsedValue: number = decimalCode.parse(formControl.value);\n            if (parsedValue != null && parsedValue < MIN_VALUE) {\n                return {\n                    minValue: {\n                        valid: false\n                    }\n                };\n            } else if (parsedValue != null && parsedValue > MAX_VALUE) {\n                return {\n                    maxValue: {\n                        valid: false\n                    }\n                };\n            }\n            return null; // The number is valid.\n        } else {\n            return {\n                format: {\n                    valid: false\n                }\n            };\n        }\n    };\n\n}\nexport class LocaleNumberValidatorDirective implements Validator, OnInit {\n/**\n * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\n * @param {?} digits\n * @return {?}\n */\nset l10nValidateNumber(digits: string) {\n        this.digits = digits;\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset validateLocaleNumber(digits: string) {\n        this.digits = digits;\n    }\npublic minValue: number;\npublic maxValue: number;\nprivate digits: string;\nprivate readonly MIN_VALUE: number = Number.MIN_VALUE;\nprivate readonly MAX_VALUE: number = Number.MAX_VALUE;\nprivate validator: Function;\n/**\n * @return {?}\n */\npublic ngOnInit(): void {\n        this.validator = validateLocaleNumber(\n            this.digits,\n            this.minValue || this.MIN_VALUE,\n            this.maxValue || this.MAX_VALUE\n        );\n    }\n/**\n * @param {?} formControl\n * @return {?}\n */\npublic validate(formControl: FormControl): Function {\n        return this.validator(formControl);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[l10nValidateNumber][ngModel],[l10nValidateNumber][formControl], \\\n        [validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]',\n    providers: [\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => LocaleNumberValidatorDirective), multi: true }\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nValidateNumber': [{ type: Input },],\n'validateLocaleNumber': [{ type: Input },],\n'minValue': [{ type: Input },],\n'maxValue': [{ type: Input },],\n};\n}\n\nfunction LocaleNumberValidatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleNumberValidatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleNumberValidatorDirective.ctorParameters;\n/** @type {?} */\nLocaleNumberValidatorDirective.propDecorators;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.minValue;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.maxValue;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.digits;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MIN_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MAX_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.validator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { LocaleConfig } from '../models/localization/locale-config';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleStorage, BrowserStorage } from '../services/locale-storage';\r\nimport { TranslationConfig } from '../models/translation/translation-config';\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { TranslationProvider, HttpTranslationProvider } from '../services/translation-provider';\r\nimport { TranslationHandler, DefaultTranslationHandler } from '../services/translation-handler';\r\nimport { TranslatePipe } from '../pipes/translate.pipe';\r\nimport { TranslateDirective } from '../directives/translate.directive';\r\nimport { Token } from '../models/types';\n/**\n * Provides dependencies, pipes & directives for translating messages.\n */\nexport class TranslationModule {\n/**\n * Use in AppModule: new instances of LocaleService & TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: TranslationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                LocaleConfig,\r\n                LocaleService,\r\n                {\r\n                    provide: LocaleStorage,\r\n                    useClass: token.localeStorage || BrowserStorage\r\n                },\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * Use in feature modules with lazy loading: new instance of TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forChild(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: TranslationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: InjectorRef) {\r\n        // Creates the instance of the InjectorRef, so that module dependencies are available.\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        TranslatePipe,\r\n        TranslateDirective\r\n    ],\r\n    exports: [\r\n        TranslatePipe,\r\n        TranslateDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InjectorRef, },\n];\n}\n\nfunction TranslationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationModule.ctorParameters;\n/** @type {?} */\nTranslationModule.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { TranslationModule } from './translation.module';\r\nimport { LocaleConfig } from '../models/localization/locale-config';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleStorage, BrowserStorage } from '../services/locale-storage';\r\nimport { TranslationConfig } from '../models/translation/translation-config';\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { TranslationProvider, HttpTranslationProvider } from '../services/translation-provider';\r\nimport { TranslationHandler, DefaultTranslationHandler } from '../services/translation-handler';\r\nimport { LocaleDatePipe } from '../pipes/locale-date.pipe';\r\nimport { LocaleDecimalPipe, LocalePercentPipe, LocaleCurrencyPipe } from '../pipes/locale-number.pipe';\r\nimport { LocaleDateDirective } from '../directives/locale-date.directive';\r\nimport {\r\n    LocaleDecimalDirective,\r\n    LocalePercentDirective,\r\n    LocaleCurrencyDirective\r\n} from '../directives/locale-number.directive';\r\nimport { Token } from '../models/types';\n/**\n * Provides dependencies, pipes & directives for translating messages, dates & numbers.\n */\nexport class LocalizationModule {\n/**\n * Use in AppModule: new instances of LocaleService & TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocalizationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                LocaleConfig,\r\n                LocaleService,\r\n                {\r\n                    provide: LocaleStorage,\r\n                    useClass: token.localeStorage || BrowserStorage\r\n                },\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * Use in feature modules with lazy loading: new instance of TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forChild(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocalizationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: InjectorRef) {\r\n        // Creates the instance of the InjectorRef, so that module dependencies are available.\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        LocaleDatePipe,\r\n        LocaleDecimalPipe,\r\n        LocalePercentPipe,\r\n        LocaleCurrencyPipe,\r\n        LocaleDateDirective,\r\n        LocaleDecimalDirective,\r\n        LocalePercentDirective,\r\n        LocaleCurrencyDirective\r\n    ],\r\n    imports: [\r\n        TranslationModule\r\n    ],\r\n    exports: [\r\n        TranslationModule,\r\n        LocaleDatePipe,\r\n        LocaleDecimalPipe,\r\n        LocalePercentPipe,\r\n        LocaleCurrencyPipe,\r\n        LocaleDateDirective,\r\n        LocaleDecimalDirective,\r\n        LocalePercentDirective,\r\n        LocaleCurrencyDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InjectorRef, },\n];\n}\n\nfunction LocalizationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalizationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalizationModule.ctorParameters;\n/** @type {?} */\nLocalizationModule.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { DecimalCode } from '../models/validation/decimal-code';\r\nimport { LocaleValidation } from '../services/locale-validation';\r\nimport { LocaleNumberValidatorDirective } from '../directives/locale-number-validator.directive';\n/**\n * Provides dependencies & directives for locale validation.\n */\nexport class LocaleValidationModule {\n/**\n * Use in AppModule: new instance of LocaleValidation.\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocaleValidationModule,\r\n            providers: [DecimalCode, LocaleValidation]\r\n        };\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        LocaleNumberValidatorDirective\r\n    ],\r\n    exports: [\r\n        LocaleNumberValidatorDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleValidationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleValidationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleValidationModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter to the translate pipe.\n * @return {?}\n */\nexport function Language(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ translation: TranslationService = InjectorRef.get(TranslationService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = translation.getLanguage();\r\n                // When the language changes, subscribes to the event & updates language property.\r\n                subscription = translation.translationChanged.subscribe(\r\n                    (language: string) => {\r\n                        this[propertyKey] = language;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter\rto localeDecimal, localePercent & localeCurrency pipes.\n * @return {?}\n */\nexport function DefaultLocale(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = locale.getDefaultLocale();\r\n                // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n                subscription = locale.defaultLocaleChanged.subscribe(\r\n                    (defaultLocale: string) => {\r\n                        this[propertyKey] = defaultLocale;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter to the localeCurrency pipe.\n * @return {?}\n */\nexport function Currency(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = locale.getCurrentCurrency();\r\n                // When the currency changes, subscribes to the event & updates currency property.\r\n                subscription = locale.currencyCodeChanged.subscribe(\r\n                    (currency: string) => {\r\n                        this[propertyKey] = currency;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { Type } from './types';\n/**\n * Allows to get the dependencies at the module level or component.\n */\nexport class InjectorRef {\nprivate static injector: Injector;\n/**\n * @template T\n * @param {?} token\n * @return {?}\n */\npublic static get<T>(token: Type<T>): T {\r\n        return this.injector.get(token);\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: Injector) {\r\n        InjectorRef.injector = this.injector;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction InjectorRef_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectorRef.injector;\n/** @type {?} */\nInjectorRef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectorRef.ctorParameters;\n/** @type {?} */\nInjectorRef.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleCodes } from './locale-codes';\r\nimport { Language } from '../types';\r\n\r\nexport interface ILocaleConfig extends LocaleCodes {\r\n\r\n    languageCodes: Language[];\r\n\r\n    storageIsDisabled: boolean;\r\n    localStorage: boolean;\r\n    sessionStorage: boolean;\r\n    cookiesExpirationDays?: number;\r\n\r\n}\nexport class LocaleConfig implements ILocaleConfig {\npublic languageCode: string;\npublic scriptCode?: string;\npublic countryCode?: string;\npublic numberingSystem?: string;\npublic calendar?: string;\npublic currencyCode: string;\npublic languageCodes: Language[] = [];\npublic storageIsDisabled: boolean = false;\npublic localStorage: boolean = false;\npublic sessionStorage: boolean = false;\npublic cookiesExpirationDays?: number;\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleConfig.ctorParameters;\n/** @type {?} */\nLocaleConfig.prototype.languageCode;\n/** @type {?} */\nLocaleConfig.prototype.scriptCode;\n/** @type {?} */\nLocaleConfig.prototype.countryCode;\n/** @type {?} */\nLocaleConfig.prototype.numberingSystem;\n/** @type {?} */\nLocaleConfig.prototype.calendar;\n/** @type {?} */\nLocaleConfig.prototype.currencyCode;\n/** @type {?} */\nLocaleConfig.prototype.languageCodes;\n/** @type {?} */\nLocaleConfig.prototype.storageIsDisabled;\n/** @type {?} */\nLocaleConfig.prototype.localStorage;\n/** @type {?} */\nLocaleConfig.prototype.sessionStorage;\n/** @type {?} */\nLocaleConfig.prototype.cookiesExpirationDays;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { LocaleConfig } from './locale-config';\r\nimport { Language } from '../types';\r\n\r\nexport interface ILocaleConfigAPI {\r\n\r\n    /**\r\n     * Adds a language to use in the app, specifying the layout direction.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param textDirection Default is ltr (left to right)\r\n     */\r\n    addLanguage(languageCode: string, textDirection?: string): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Adds the languages to use in the app.\r\n     * @param languageCodes Array of ISO 639 two-letter or three-letter codes of the languages\r\n     */\r\n    addLanguages(languageCodes: string[]): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Disables the browser storage for language, default locale & currency.\r\n     */\r\n    disableStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * If the cookie expiration is omitted, the cookie becomes a session cookie.\r\n     */\r\n    setCookieExpiration(days?: number): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Sets browser LocalStorage as default for language, default locale & currency.\r\n     */\r\n    useLocalStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Sets browser SessionStorage as default for language, default locale & currency.\r\n     */\r\n    useSessionStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the language to be used:\r\n     *  - tries to get the language from the browser storage;\r\n     *  - tries to get the language of the browser if it has been added;\r\n     *  - otherwise gets the parameter language.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     */\r\n    defineLanguage(languageCode: string): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the default locale to be used, regardless of the browser language.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param countryCode ISO 3166 two-letter, uppercase code of the country\r\n     * @param scriptCode Optional ISO 15924 four-letter script code\r\n     * @param numberingSystem Optional numbering system\r\n     * @param calendar Optional calendar\r\n     */\r\n    defineDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the currency to be used.\r\n     * @param defaultCurrency ISO 4217 three-letter code of the currency\r\n     */\r\n    defineCurrency(currencyCode: string): ILocaleConfigAPI;\r\n\r\n}\nexport class LocaleConfigAPI implements ILocaleConfigAPI {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: LocaleConfig) { }\n/**\n * @param {?} languageCode\n * @param {?=} textDirection\n * @return {?}\n */\npublic addLanguage(languageCode: string, textDirection: string = \"LTR\"): ILocaleConfigAPI {\r\n        this.configuration.languageCodes.push({ code: languageCode, direction: textDirection });\r\n        return this;\r\n    }\n/**\n * @param {?} languageCodes\n * @return {?}\n */\npublic addLanguages(languageCodes: string[]): ILocaleConfigAPI {\r\n        for (const /** @type {?} */ languageCode of languageCodes) {\r\n            this.configuration.languageCodes.push({ code: languageCode, direction: \"ltr\" });\r\n        }\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic disableStorage(): ILocaleConfigAPI {\r\n        this.configuration.storageIsDisabled = true;\r\n        return this;\r\n    }\n/**\n * @param {?=} days\n * @return {?}\n */\npublic setCookieExpiration(days?: number): ILocaleConfigAPI {\r\n        this.configuration.cookiesExpirationDays = days;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useLocalStorage(): ILocaleConfigAPI {\r\n        this.configuration.localStorage = true;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useSessionStorage(): ILocaleConfigAPI {\r\n        this.configuration.sessionStorage = true;\r\n        return this;\r\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\npublic defineLanguage(languageCode: string): ILocaleConfigAPI {\r\n        this.configuration.languageCode = languageCode;\r\n        return this;\r\n    }\n/**\n * @param {?} languageCode\n * @param {?} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic defineDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): ILocaleConfigAPI {\r\n        this.configuration.languageCode = languageCode;\r\n        this.configuration.countryCode = countryCode;\r\n        this.configuration.scriptCode = scriptCode;\r\n        this.configuration.numberingSystem = numberingSystem;\r\n        this.configuration.calendar = calendar;\r\n        return this;\r\n    }\n/**\n * @param {?} currencyCode\n * @return {?}\n */\npublic defineCurrency(currencyCode: string): ILocaleConfigAPI {\r\n        this.configuration.currencyCode = currencyCode;\r\n        return this;\r\n    }\r\n\r\n}\n\nfunction LocaleConfigAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleConfigAPI.prototype.configuration;\n}\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleConfig } from '../models/localization/locale-config';\n/**\n * Implement this class-interface to create a custom storage for default locale & currency.\n * @abstract\n */\nexport abstract class LocaleStorage {\n/**\n * This method must contain the logic to read the storage.\r\\@param name 'defaultLocale' or 'currency'\r\\@return A promise with the value of the given name\n * @abstract\n * @param {?} name\n * @return {?}\n */\nread(name: string) {}\n/**\n * This method must contain the logic to write the storage.\r\\@param name 'defaultLocale' or 'currency'\r\\@param value The value for the given name\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nwrite(name: string, value: string) {}\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements LocaleStorage {\nprivate hasCookie: boolean;\nprivate hasStorage: boolean;\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: LocaleConfig) {\r\n        this.hasCookie = typeof navigator !== \"undefined\" && navigator.cookieEnabled;\r\n        this.hasStorage = typeof Storage !== \"undefined\";\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\npublic async read(name: string): Promise<string | null> {\r\n        let /** @type {?} */ value: string | null = null;\r\n        if (!this.configuration.storageIsDisabled) {\r\n            if (this.configuration.localStorage && this.hasStorage) {\r\n                value = this.getLocalStorage(name);\r\n            } else if (this.configuration.sessionStorage && this.hasStorage) {\r\n                value = this.getSessionStorage(name);\r\n            } else if (this.hasCookie) {\r\n                value = this.getCookie(name);\r\n            }\r\n        }\r\n        return value;\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\npublic async write(name: string, value: string): Promise<void> {\r\n        if (!this.configuration.storageIsDisabled) {\r\n            if (this.configuration.localStorage && this.hasStorage) {\r\n                this.setLocalStorage(name, value);\r\n            } else if (this.configuration.sessionStorage && this.hasStorage) {\r\n                this.setSessionStorage(name, value);\r\n            } else if (this.hasCookie) {\r\n                this.setCookie(name, value);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getLocalStorage(name: string): string | null {\r\n        return localStorage.getItem(name);\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getSessionStorage(name: string): string | null {\r\n        return sessionStorage.getItem(name);\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getCookie(name: string): string | null {\r\n        let /** @type {?} */ result: RegExpExecArray | null = null;\r\n        if (typeof document !== \"undefined\") {\r\n            result = new RegExp(\"(?:^|; )\" + encodeURIComponent(name) + \"=([^;]*)\").exec(document.cookie);\r\n        }\r\n        return result ? result[1] : null;\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setLocalStorage(name: string, value: string): void {\r\n        localStorage.setItem(name, value);\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setSessionStorage(name: string, value: string): void {\r\n        sessionStorage.setItem(name, value);\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setCookie(name: string, value: string): void {\r\n        let /** @type {?} */ expires: string = \"\";\r\n        if (this.configuration.cookiesExpirationDays != null) {\r\n            const /** @type {?} */ expirationDate: Date = new Date();\r\n            expirationDate.setTime(\r\n                expirationDate.getTime() +\r\n                (this.configuration.cookiesExpirationDays * 24 * 60 * 60 * 1000)\r\n            );\r\n            expires = \"; expires=\" + expirationDate.toUTCString();\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            document.cookie = name + \"=\" + value + expires + \"; path=/\";\r\n        }\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleConfig, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasCookie;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.configuration;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { DefaultLocaleCodes } from './locale-codes';\nexport class DefaultLocale implements DefaultLocaleCodes {\npublic languageCode: string;\npublic scriptCode?: string;\npublic countryCode?: string;\npublic numberingSystem?: string;\npublic calendar?: string;\n/**\n * @return {?}\n */\npublic get value(): string {\r\n        return this._value;\r\n    }\n/**\n * @param {?} defaultLocale\n * @return {?}\n */\npublic set value(defaultLocale: string) {\r\n        this._value = defaultLocale;\r\n        this.parseValue();\r\n    }\nprivate _value: string;\n/**\n * @param {?} languageCode\n * @param {?=} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic build(\r\n        languageCode: string,\r\n        countryCode?: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): void {\r\n        this.languageCode = languageCode;\r\n        this.scriptCode = scriptCode;\r\n        this.countryCode = countryCode;\r\n        this.numberingSystem = numberingSystem;\r\n        this.calendar = calendar;\r\n\r\n        const /** @type {?} */ value: string[] = [];\r\n        value.push(languageCode);\r\n        value.push(!!scriptCode ? \"-\" + scriptCode : \"\");\r\n        value.push(!!countryCode ? \"-\" + countryCode : \"\");\r\n        // Adds the 'u' (Unicode) extension.\r\n        value.push((!!numberingSystem || !!calendar) ? \"-u\" : \"\");\r\n        value.push(!!numberingSystem ? \"-nu-\" + numberingSystem : \"\");\r\n        value.push(!!calendar ? \"-ca-\" + calendar : \"\");\r\n        this._value = value.join(\"\");\r\n    }\n/**\n * @return {?}\n */\nprivate parseValue(): void {\r\n        if (!!this.value) {\r\n            let /** @type {?} */ value: string = this.value;\r\n            // Looks for the 'u' (Unicode) extension.\r\n            const /** @type {?} */ index: number = value.search(\"-u\");\r\n            if (index != -1) {\r\n                const /** @type {?} */ extensions: string[] = value.substring(index + 1).split(\"-\");\r\n                switch (extensions.length) {\r\n                    case 3:\r\n                        if (extensions[1] == \"nu\") {\r\n                            this.numberingSystem = extensions[2];\r\n                        } else if (extensions[1] == \"ca\") {\r\n                            this.calendar = extensions[2];\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this.numberingSystem = extensions[2];\r\n                        this.calendar = extensions[4];\r\n                        break;\r\n                }\r\n                // Extracts the codes.\r\n                value = value.substring(0, index);\r\n            }\r\n\r\n            const /** @type {?} */ codes: string[] = value.split(\"-\");\r\n            switch (codes.length) {\r\n                case 1:\r\n                    this.languageCode = codes[0];\r\n                    break;\r\n                case 2:\r\n                    this.languageCode = codes[0];\r\n                    this.countryCode = codes[1];\r\n                    break;\r\n                default:\r\n                    this.languageCode = codes[0];\r\n                    this.scriptCode = codes[1];\r\n                    this.countryCode = codes[2];\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\n\nfunction DefaultLocale_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultLocale.prototype.languageCode;\n/** @type {?} */\nDefaultLocale.prototype.scriptCode;\n/** @type {?} */\nDefaultLocale.prototype.countryCode;\n/** @type {?} */\nDefaultLocale.prototype.numberingSystem;\n/** @type {?} */\nDefaultLocale.prototype.calendar;\n/** @type {?} */\nDefaultLocale.prototype._value;\n}\n\r\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\nimport { ILocaleConfig, LocaleConfig } from '../models/localization/locale-config';\nimport { ILocaleConfigAPI, LocaleConfigAPI } from '../models/localization/locale-config-api';\nimport { LocaleStorage } from './locale-storage';\nimport { DefaultLocale } from '../models/localization/default-locale';\nimport { Language } from '../models/types';\n\n/**\n * Manages language, default locale & currency.\n */\nexport interface ILocaleService {\n\n    languageCodeChanged: EventEmitter<string>;\n    defaultLocaleChanged: EventEmitter<string>;\n    currencyCodeChanged: EventEmitter<string>;\n\n    loadTranslation: Subject<any>;\n\n    /**\n     * Configure the service in the application root module or in a feature module with lazy loading.\n     */\n    addConfiguration(): ILocaleConfigAPI;\n\n    getConfiguration(): ILocaleConfig;\n\n    init(): Promise<void>;\n\n    getAvailableLanguages(): string[];\n\n    getLanguageDirection(languageCode?: string): string;\n\n    getCurrentLanguage(): string;\n\n    getCurrentCountry(): string;\n\n    getCurrentLocale(): string;\n\n    getCurrentScript(): string;\n\n    getCurrentNumberingSystem(): string;\n\n    getCurrentCalendar(): string;\n\n    getDefaultLocale(): string;\n\n    getCurrentCurrency(): string;\n\n    setCurrentLanguage(languageCode: string): void;\n\n    setDefaultLocale(\n        languageCode: string,\n        countryCode: string,\n        scriptCode?: string,\n        numberingSystem?: string,\n        calendar?: string\n    ): void;\n\n    setCurrentCurrency(currencyCode: string): void;\n\n}\nexport class LocaleService implements ILocaleService {\npublic languageCodeChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic defaultLocaleChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic currencyCodeChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic loadTranslation: Subject<any> = new Subject();\nprivate defaultLocale: DefaultLocale = new DefaultLocale();\nprivate currencyCode: string;\n/**\n * @param {?} configuration\n * @param {?} storage\n */\nconstructor(private configuration: LocaleConfig,\nprivate storage: LocaleStorage) { }\n/**\n * @return {?}\n */\npublic addConfiguration(): ILocaleConfigAPI {\n        return new LocaleConfigAPI(this.configuration);\n    }\n/**\n * @return {?}\n */\npublic getConfiguration(): ILocaleConfig {\n        return this.configuration;\n    }\n/**\n * @return {?}\n */\npublic async init(): Promise<void> {\n        await this.initStorage();\n\n        if (!!this.configuration.languageCode && !!this.configuration.countryCode) {\n            this.initDefaultLocale();\n        } else if (!!this.configuration.languageCode) {\n            this.initLanguage();\n        }\n\n        if (!!this.configuration.currencyCode) {\n            this.initCurrency();\n        }\n    }\n/**\n * @return {?}\n */\npublic getAvailableLanguages(): string[] {\n        return this.configuration.languageCodes.map((language: Language) => language.code);\n    }\n/**\n * @param {?=} languageCode\n * @return {?}\n */\npublic getLanguageDirection(languageCode: string = this.defaultLocale.languageCode): string {\n        const /** @type {?} */ matchedLanguages: Language[] = this.matchLanguage(languageCode);\n        return matchedLanguages[0].direction;\n    }\n/**\n * @return {?}\n */\npublic getCurrentLanguage(): string {\n        return this.defaultLocale.languageCode;\n    }\n/**\n * @return {?}\n */\npublic getCurrentCountry(): string {\n        if (!!this.defaultLocale.countryCode) {\n            return this.defaultLocale.countryCode;\n        }\n        return \"\";\n    }\n/**\n * @return {?}\n */\npublic getCurrentScript(): string {\n        if (!!this.defaultLocale.scriptCode) {\n            return this.defaultLocale.scriptCode;\n        }\n        return \"\";\n    }\n/**\n * @return {?}\n */\npublic getCurrentLocale(): string {\n        const /** @type {?} */ locale: string = !!this.defaultLocale.countryCode\n            ? this.defaultLocale.languageCode + \"-\" + this.defaultLocale.countryCode\n            : this.defaultLocale.languageCode;\n        return locale;\n    }\n/**\n * @return {?}\n */\npublic getCurrentNumberingSystem(): string {\n        if (!!this.defaultLocale.numberingSystem) {\n            return this.defaultLocale.numberingSystem;\n        }\n        return \"\";\n    }\n/**\n * @return {?}\n */\npublic getCurrentCalendar(): string {\n        if (!!this.defaultLocale.calendar) {\n            return this.defaultLocale.calendar;\n        }\n        return \"\";\n    }\n/**\n * @return {?}\n */\npublic getDefaultLocale(): string {\n        return this.defaultLocale.value;\n    }\n/**\n * @return {?}\n */\npublic getCurrentCurrency(): string {\n        return this.currencyCode;\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\npublic setCurrentLanguage(languageCode: string): void {\n        if (this.defaultLocale.languageCode != languageCode) {\n            this.defaultLocale.build(languageCode);\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\n            this.sendLanguageEvents();\n            this.sendTranslationEvents();\n        }\n    }\n/**\n * @param {?} languageCode\n * @param {?} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic setDefaultLocale(\n        languageCode: string,\n        countryCode: string,\n        scriptCode?: string,\n        numberingSystem?: string,\n        calendar?: string\n    ): void {\n        if (this.defaultLocale.languageCode != languageCode ||\n            this.defaultLocale.countryCode != countryCode ||\n            this.defaultLocale.scriptCode != scriptCode ||\n            this.defaultLocale.numberingSystem != numberingSystem ||\n            this.defaultLocale.calendar != calendar) {\n\n            this.defaultLocale.build(\n                languageCode,\n                countryCode,\n                scriptCode,\n                numberingSystem,\n                calendar\n            );\n\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\n            this.sendDefaultLocaleEvents();\n            this.sendTranslationEvents();\n        }\n    }\n/**\n * @param {?} currencyCode\n * @return {?}\n */\npublic setCurrentCurrency(currencyCode: string): void {\n        if (this.currencyCode != currencyCode) {\n            this.currencyCode = currencyCode;\n            this.storage.write(\"currency\", this.currencyCode);\n            this.sendCurrencyEvents();\n        }\n    }\n/**\n * @return {?}\n */\nprivate async initStorage(): Promise<void> {\n        // Tries to retrieve default locale & currency from the browser storage.\n        if (!this.defaultLocale.value) {\n            const /** @type {?} */ defaultLocale: string | null = await this.storage.read(\"defaultLocale\");\n            if (!!defaultLocale) {\n                this.defaultLocale.value = defaultLocale;\n            }\n        }\n        if (this.currencyCode == null) {\n            const /** @type {?} */ currencyCode: string | null = await this.storage.read(\"currency\");\n            if (!!currencyCode) {\n                this.currencyCode = currencyCode;\n            }\n        }\n    }\n/**\n * @return {?}\n */\nprivate initLanguage(): void {\n        if (!this.defaultLocale.languageCode) {\n            const /** @type {?} */ browserLanguage: string | null = this.getBrowserLanguage();\n            let /** @type {?} */ matchedLanguages: Language[] = [];\n            if (!!browserLanguage) {\n                matchedLanguages = this.matchLanguage(browserLanguage);\n            }\n            if (!!browserLanguage && matchedLanguages.length > 0) {\n                this.defaultLocale.build(browserLanguage);\n            } else {\n                this.defaultLocale.build(this.configuration.languageCode);\n            }\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\n        }\n        this.sendLanguageEvents();\n    }\n/**\n * @return {?}\n */\nprivate initDefaultLocale(): void {\n        if (!this.defaultLocale.value) {\n            this.defaultLocale.build(\n                this.configuration.languageCode,\n                this.configuration.countryCode,\n                this.configuration.scriptCode,\n                this.configuration.numberingSystem,\n                this.configuration.calendar\n            );\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\n        }\n        this.sendDefaultLocaleEvents();\n    }\n/**\n * @return {?}\n */\nprivate initCurrency(): void {\n        if (this.currencyCode == null) {\n            this.currencyCode = this.configuration.currencyCode;\n            this.storage.write(\"currency\", this.currencyCode);\n        }\n        this.sendCurrencyEvents();\n    }\n/**\n * @return {?}\n */\nprivate getBrowserLanguage(): string | null {\n        let /** @type {?} */ browserLanguage: string | null = null;\n        if (typeof navigator !== \"undefined\" && navigator.language) {\n            browserLanguage = navigator.language;\n        }\n        if (browserLanguage != null) {\n            const /** @type {?} */ index: number = browserLanguage.indexOf(\"-\");\n            if (index != -1) {\n                browserLanguage = browserLanguage.substring(0, index);\n            }\n        }\n        return browserLanguage;\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\nprivate matchLanguage(languageCode: string): Language[] {\n        const /** @type {?} */ matchedLanguages: Language[] = this.configuration.languageCodes.filter(\n            (language: Language) => {\n                return language.code == languageCode;\n            });\n        return matchedLanguages;\n    }\n/**\n * @return {?}\n */\nprivate sendLanguageEvents(): void {\n        this.languageCodeChanged.emit(this.defaultLocale.languageCode);\n    }\n/**\n * @return {?}\n */\nprivate sendDefaultLocaleEvents(): void {\n        this.defaultLocaleChanged.emit(this.defaultLocale.value);\n    }\n/**\n * @return {?}\n */\nprivate sendCurrencyEvents(): void {\n        this.currencyCodeChanged.emit(this.currencyCode);\n    }\n/**\n * @return {?}\n */\nprivate sendTranslationEvents(): void {\n        // This event is subscribed by TranslationService to load the translation data.\n        this.loadTranslation.next();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleConfig, },\n{type: LocaleStorage, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'languageCodeChanged': [{ type: Output },],\n'defaultLocaleChanged': [{ type: Output },],\n'currencyCodeChanged': [{ type: Output },],\n};\n}\n\nfunction LocaleService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleService.ctorParameters;\n/** @type {?} */\nLocaleService.propDecorators;\n/** @type {?} */\nLocaleService.prototype.languageCodeChanged;\n/** @type {?} */\nLocaleService.prototype.defaultLocaleChanged;\n/** @type {?} */\nLocaleService.prototype.currencyCodeChanged;\n/** @type {?} */\nLocaleService.prototype.loadTranslation;\n/** @type {?} */\nLocaleService.prototype.defaultLocale;\n/** @type {?} */\nLocaleService.prototype.currencyCode;\n/** @type {?} */\nLocaleService.prototype.configuration;\n/** @type {?} */\nLocaleService.prototype.storage;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Provider } from '../types';\r\n\r\nexport interface ITranslationConfig {\r\n\r\n    translationData: any;\r\n\r\n    providers: Provider[];\r\n    localeAsLanguage: boolean;\r\n    missingValue: string;\r\n    missingKey: string;\r\n    keySeparator: string;\r\n    i18nPlural: boolean;\r\n\r\n}\nexport class TranslationConfig implements ITranslationConfig {\npublic translationData: any = {};\npublic providers: Provider[] = [];\npublic localeAsLanguage: boolean = false;\npublic missingValue: string;\npublic missingKey: string;\npublic keySeparator: string = \".\";\npublic i18nPlural: boolean = true;\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationConfig.ctorParameters;\n/** @type {?} */\nTranslationConfig.prototype.translationData;\n/** @type {?} */\nTranslationConfig.prototype.providers;\n/** @type {?} */\nTranslationConfig.prototype.localeAsLanguage;\n/** @type {?} */\nTranslationConfig.prototype.missingValue;\n/** @type {?} */\nTranslationConfig.prototype.missingKey;\n/** @type {?} */\nTranslationConfig.prototype.keySeparator;\n/** @type {?} */\nTranslationConfig.prototype.i18nPlural;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Provides the methods to check if Intl APIs are supported.\n */\nexport class IntlAPI {\nprivate static readonly hasIntl: boolean = Intl && typeof Intl === \"object\";\n/**\n * @return {?}\n */\npublic static hasDateTimeFormat(): boolean {\r\n        return this.hasIntl && Intl​.hasOwnProperty​(\"DateTimeFormat\");\r\n    }\n/**\n * @return {?}\n */\npublic static hasNumberFormat(): boolean {\r\n        return this.hasIntl && Intl.hasOwnProperty​(\"NumberFormat\");\r\n    }\n/**\n * @return {?}\n */\npublic static hasCollator(): boolean {\r\n        return this.hasIntl && Intl.hasOwnProperty​(\"Collator\");\r\n    }\r\n\r\n}\n\nfunction IntlAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nIntlAPI.hasIntl;\n}\n\r\n","import { TranslationConfig } from './translation-config';\r\n\r\nexport interface ITranslationConfigAPI {\r\n\r\n    /**\r\n     * Direct loading: adds translation data.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param translation Translation data of the language\r\n     */\r\n    addTranslation(languageCode: string, translation: any): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a translation provider.\r\n     * @param prefix The path prefix of the json files\r\n     * @param dataFormat Data format: default & supported value is 'json'\r\n     */\r\n    addProvider(prefix: string, dataFormat?: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a Web API provider.\r\n     * @param path [path]{languageCode} will be the URL used by the Http GET requests\r\n     * @param dataFormat Data format: default & supported value is 'json'\r\n     */\r\n    addWebAPIProvider(path: string, dataFormat?: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a custom provider.\r\n     */\r\n    addCustomProvider(args: any): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the use of locale (languageCode-countryCode) as language.\r\n     */\r\n    useLocaleAsLanguage(): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the value to use for missing keys.\r\n     */\r\n    setMissingValue(value: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the key to use for missing keys.\r\n     */\r\n    setMissingKey(key: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets composed key separator. Default is the point '.'.\r\n     */\r\n    setComposedKeySeparator(keySeparator: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Disables the translation of numbers that are contained at the beginning of the keys.\r\n     */\r\n    disableI18nPlural(): ITranslationConfigAPI;\r\n\r\n}\nexport class TranslationConfigAPI {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: TranslationConfig) { }\n/**\n * @param {?} languageCode\n * @param {?} translation\n * @return {?}\n */\npublic addTranslation(languageCode: string, translation: any): ITranslationConfigAPI {\r\n        this.configuration.translationData[languageCode] =\r\n            typeof this.configuration.translationData[languageCode] !== \"undefined\"\r\n                ? { ...this.configuration.translationData[languageCode], ...translation } // Object spread.\r\n                : translation;\r\n        return this;\r\n    }\n/**\n * @param {?} prefix\n * @param {?=} dataFormat\n * @return {?}\n */\npublic addProvider(prefix: string, dataFormat: string = \"json\"): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: { type: \"Static\", prefix: prefix, dataFormat: dataFormat } });\r\n        return this;\r\n    }\n/**\n * @param {?} path\n * @param {?=} dataFormat\n * @return {?}\n */\npublic addWebAPIProvider(path: string, dataFormat: string = \"json\"): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: { type: \"WebAPI\", path: path, dataFormat: dataFormat } });\r\n        return this;\r\n    }\n/**\n * @param {?=} args\n * @return {?}\n */\npublic addCustomProvider(args?: any): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: args });\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useLocaleAsLanguage(): ITranslationConfigAPI {\r\n        this.configuration.localeAsLanguage = true;\r\n        return this;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic setMissingValue(value: string): ITranslationConfigAPI {\r\n        this.configuration.missingValue = value;\r\n        return this;\r\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic setMissingKey(key: string): ITranslationConfigAPI {\r\n        this.configuration.missingKey = key;\r\n        return this;\r\n    }\n/**\n * @param {?} keySeparator\n * @return {?}\n */\npublic setComposedKeySeparator(keySeparator: string): ITranslationConfigAPI {\r\n        this.configuration.keySeparator = keySeparator;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic disableI18nPlural(): ITranslationConfigAPI {\r\n        this.configuration.i18nPlural = false;\r\n        return this;\r\n    }\r\n\r\n}\n\nfunction TranslationConfigAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationConfigAPI.prototype.configuration;\n}\n\r\n","import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\n/**\n * Implement this class-interface to create a custom provider for translation data.\n * @abstract\n */\nexport abstract class TranslationProvider {\n/**\n * This method must contain the logic of data access.\n * @abstract\n * @param {?} language The current language\n * @param {?} args The parameter of addCustomProvider method\n * @return {?} An observable of an object of translation data: {key: value}\n */\ngetTranslation(language: string, args: any) {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationProvider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationProvider.ctorParameters;\n}\n\nexport class HttpTranslationProvider implements TranslationProvider {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) { }\n/**\n * @param {?} language\n * @param {?} args\n * @return {?}\n */\npublic getTranslation(language: string, args: any): Observable<any> {\n        let /** @type {?} */ url: string = \"\";\n\n        switch (args.type) {\n            case \"WebAPI\":\n                url += args.path + language;\n                break;\n            default:\n                url += args.prefix + language + \".\" + args.dataFormat;\n        }\n\n        return this.http.get(url)\n            .map((res: Response) => res.json());\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction HttpTranslationProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTranslationProvider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTranslationProvider.ctorParameters;\n/** @type {?} */\nHttpTranslationProvider.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\nimport { TranslationConfig } from '../models/translation/translation-config';\n/**\n * Implement this class-interface to create a custom handler for translated values.\n * @abstract\n */\nexport abstract class TranslationHandler {\n/**\n * This method must contain the logic to parse the translated value.\n * @abstract\n * @param {?} path The path of the key\n * @param {?} key The key that has been requested\n * @param {?} value The translated value\n * @param {?} args The parameters passed along with the key\n * @param {?} lang The current language\n * @return {?} The parsed value\n */\nparseValue(path: string, key: string, value: string | null, args: any, lang: string) {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationHandler.ctorParameters;\n}\n\nexport class DefaultTranslationHandler implements TranslationHandler {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: TranslationConfig) { }\n/**\n * @param {?} path\n * @param {?} key\n * @param {?} value\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\npublic parseValue(path: string, key: string, value: string | null, args: any, lang: string): string {\n        if (value == null) {\n            return this.handleMissingValue(path);\n        } else if (args) {\n            return this.handleArgs(value, args);\n        }\n        return value;\n    }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate handleMissingValue(path: string): string {\n        if (this.configuration.missingValue != null) {\n            return this.configuration.missingValue;\n        }\n        // The same path is returned.\n        return path;\n    }\n/**\n * @param {?} value\n * @param {?} args\n * @return {?}\n */\nprivate handleArgs(value: string, args: any): string {\n        const /** @type {?} */ TEMPLATE_REGEXP: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n        return value.replace(TEMPLATE_REGEXP, (substring: string, parsedKey: string) => {\n            const /** @type {?} */ replacer: string = /** @type {?} */(( args[parsedKey] as string));\n            return typeof replacer !== \"undefined\" ? replacer : substring;\n        });\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationConfig, },\n];\n}\n\nfunction DefaultTranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDefaultTranslationHandler.ctorParameters;\n/** @type {?} */\nDefaultTranslationHandler.prototype.configuration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export type Language = {\r\n\r\n    code: string;\r\n    direction: string;\r\n\r\n};\r\n\r\nexport type Provider = {\r\n\r\n    args: any;\r\n\r\n};\r\n\r\nexport type Decimal = {\r\n\r\n    minusSign: string;\r\n    decimalSeparator: string;\r\n    thousandSeparator: string;\r\n\r\n};\nexport type LoadingMode = number;\nexport let LoadingMode: any = {};\nLoadingMode.Direct = 0;\nLoadingMode.Async = 1;\nLoadingMode[LoadingMode.Direct] = \"Direct\";\nLoadingMode[LoadingMode.Async] = \"Async\";\n\nexport type ServiceState = number;\nexport let ServiceState: any = {};\nServiceState.isReady = 0;\nServiceState.isLoading = 1;\nServiceState.isWaiting = 2;\nServiceState[ServiceState.isReady] = \"isReady\";\nServiceState[ServiceState.isLoading] = \"isLoading\";\nServiceState[ServiceState.isWaiting] = \"isWaiting\";\n\r\n\r\nexport interface PropertyDecorator {\r\n\r\n    <T extends Function>(type: T): T;\r\n\r\n    (target: Object, propertyKey?: string | symbol): void;\r\n\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n\r\n    new (...args: any[]): T;\r\n\r\n}\r\n\r\nexport interface Token {\r\n\r\n    localeStorage?: Type<any>;\r\n    translationProvider?: Type<any>;\r\n    translationHandler?: Type<any>;\r\n\r\n}\r\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/toPromise';\nimport'rxjs/add/observable/merge';\n\nimport { LocaleService } from './locale.service';\nimport { IntlAPI } from './intl-api';\nimport { ITranslationConfig, TranslationConfig } from '../models/translation/translation-config';\nimport { ITranslationConfigAPI, TranslationConfigAPI } from '../models/translation/translation-config-api';\nimport { TranslationProvider } from './translation-provider';\nimport { TranslationHandler } from './translation-handler';\nimport { LoadingMode, ServiceState } from '../models/types';\n\n/**\n * Manages the translation data.\n */\nexport interface ITranslationService {\n\n    translationChanged: EventEmitter<string>;\n    translationError: EventEmitter<any>;\n\n    /**\n     * Configure the service in the application root module or in a feature module with lazy loading.\n     */\n    addConfiguration(): ITranslationConfigAPI;\n\n    getConfiguration(): ITranslationConfig;\n\n    /**\n     * Call this method after the configuration to initialize the service.\n     */\n    init(): Promise<void>;\n\n    /**\n     * Gets the current language of the service.\n     */\n    getLanguage(): string;\n\n    /**\n     * Translates a key or an array of keys.\n     * @param keys The key or an array of keys to be translated\n     * @param args Optional parameters contained in the key\n     * @param lang The current language of the service is used by default\n     * @return The translated value or an object: {key: value}\n     */\n    translate(keys: string | string[], args?: any, lang?: string): string | any;\n\n    translateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>;\n\n}\nexport class TranslationService implements ITranslationService {\npublic translationChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic translationError: EventEmitter<any> = new EventEmitter<any>(true);\nprivate serviceState: ServiceState;\nprivate loadingMode: LoadingMode;\nprivate language: string;\n/**\n * The translation data: {language: {key: value}}.\n */\nprivate translationData: any = {};\n/**\n * @param {?} locale\n * @param {?} configuration\n * @param {?} translationProvider\n * @param {?} translationHandler\n */\nconstructor(\nprivate locale: LocaleService,\nprivate configuration: TranslationConfig,\nprivate translationProvider: TranslationProvider,\nprivate translationHandler: TranslationHandler\n    ) {\n        this.serviceState = ServiceState.isWaiting;\n    }\n/**\n * @return {?}\n */\npublic addConfiguration(): ITranslationConfigAPI {\n        return new TranslationConfigAPI(this.configuration);\n    }\n/**\n * @return {?}\n */\npublic getConfiguration(): ITranslationConfig {\n        return this.configuration;\n    }\n/**\n * @return {?}\n */\npublic async init(): Promise<void> {\n        // Waiting for LocaleService initialization.\n        await this.locale.init();\n\n        if (this.configuration.providers.length > 0) {\n            this.loadingMode = LoadingMode.Async;\n        } else {\n            this.loadingMode = LoadingMode.Direct;\n        }\n\n        // When the language changes, loads translation data.\n        this.locale.loadTranslation.subscribe(\n            () => { this.loadTranslation(); }\n        );\n\n        await this.loadTranslation();\n    }\n/**\n * @return {?}\n */\npublic getLanguage(): string {\n        return this.language;\n    }\n/**\n * @param {?} keys\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translate(keys: string | string[], args: any = null, lang: string = this.language): string | any {\n        // If the service is not ready, returns the keys.\n        if (this.serviceState != ServiceState.isReady) return keys;\n\n        if (Array.isArray(keys)) {\n            const /** @type {?} */ data: any = {};\n            for (const /** @type {?} */ key of keys) {\n                data[key] = this.translateKey(key, args, lang);\n            }\n            return data;\n        }\n\n        return this.translateKey(keys, args, lang);\n    }\n/**\n * @param {?} keys\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translateAsync(\n        keys: string | string[],\n        args?: any,\n        lang: string = this.language\n    ): Observable<string | any> {\n        return Observable.create((observer: Observer<string | any>) => {\n            const /** @type {?} */ values: string | any = this.translate(keys, args, lang);\n            observer.next(values);\n            observer.complete();\n        });\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate translateKey(key: string, args: any, lang: string): string | null {\n        if (key == null || key == \"\") return null;\n        // I18n plural.\n        if (this.configuration.i18nPlural && /^\\d+\\b/.exec(key)) {\n            return this.translateI18nPlural(key, args, lang);\n        }\n        return this.getValue(key, args, lang);\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate getValue(key: string, args: any, lang: string): string {\n        const /** @type {?} */ path: string = key;\n        let /** @type {?} */ value: string | null = null;\n        if (this.translationData[lang]) {\n            let /** @type {?} */ translation: any = this.translationData[lang];\n\n            // Composed key.\n            const /** @type {?} */ sequences: string[] = key.split(this.configuration.keySeparator);\n            do {\n                key = /** @type {?} */(( sequences.shift()));\n                if (translation[key] && typeof translation[key] === \"object\") {\n                    translation = translation[key];\n                }\n            } while (sequences.length > 0);\n\n            value = translation[key] || translation[this.configuration.missingKey];\n        }\n        return this.translationHandler.parseValue(path, key, value, args, lang);\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate translateI18nPlural(key: string, args: any, lang: string): string {\n        let /** @type {?} */ keyText: string = key.replace(/^\\d+\\b/, \"\");\n        keyText = keyText.trim();\n\n        const /** @type {?} */ keyNumber: number = parseFloat(key);\n        key = key.replace(/^\\d+/, this.translateNumber(keyNumber));\n\n        return key.replace(keyText, this.getValue(keyText, args, lang));\n    }\n/**\n * @param {?} keyNumber\n * @return {?}\n */\nprivate translateNumber(keyNumber: number): string {\n        if (!isNaN(keyNumber) && IntlAPI.hasNumberFormat()) {\n            const /** @type {?} */ localeNumber: string = new Intl.NumberFormat(this.language).format(keyNumber);\n            return localeNumber;\n        }\n        return keyNumber.toString();\n    }\n/**\n * @return {?}\n */\nprivate async loadTranslation(): Promise<void> {\n        const /** @type {?} */ language: string = !this.configuration.localeAsLanguage\n            ? this.locale.getCurrentLanguage()\n            : this.locale.getCurrentLocale();\n\n        if (language != null && language != this.language) {\n            if (this.loadingMode == LoadingMode.Async) {\n                await this.getTranslation(language).toPromise();\n            } else {\n                this.translationData = {};\n                this.translationData[language] = this.configuration.translationData[language];\n                this.releaseTranslation(language);\n            }\n        }\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate getTranslation(language: string): Observable<any> {\n\n        return Observable.create((observer: Observer<any>) => {\n            this.translationData = {};\n            this.serviceState = ServiceState.isLoading;\n\n            const /** @type {?} */ sequencesOfTranslationData: Array<Observable<any>> = [];\n\n            for (const /** @type {?} */ provider of this.configuration.providers) {\n                sequencesOfTranslationData.push(\n                    this.translationProvider.getTranslation(language, provider.args)\n                );\n            }\n\n            // Merges all the sequences into a single observable sequence.\n            Observable.merge(...sequencesOfTranslationData).subscribe(\n                (data: any) => {\n                    this.addData(data, language);\n                },\n                (error: any) => {\n                    // Sends an event for custom actions.\n                    this.translationError.emit(error);\n                    this.releaseTranslation(language);\n                    observer.next(null);\n                    observer.complete();\n                },\n                () => {\n                    this.releaseTranslation(language);\n                    observer.next(null);\n                    observer.complete();\n                }\n            );\n        });\n    }\n/**\n * @param {?} data\n * @param {?} language\n * @return {?}\n */\nprivate addData(data: any, language: string): void {\n        this.translationData[language] = typeof this.translationData[language] !== \"undefined\"\n            ? { ...this.translationData[language], ...data } // Object spread.\n            : data;\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate releaseTranslation(language: string): void {\n        this.serviceState = ServiceState.isReady;\n        this.language = language;\n        this.sendEvents();\n    }\n/**\n * @return {?}\n */\nprivate sendEvents(): void {\n        // Sends an event for the components.\n        this.translationChanged.emit(this.language);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationConfig, },\n{type: TranslationProvider, },\n{type: TranslationHandler, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'translationChanged': [{ type: Output },],\n'translationError': [{ type: Output },],\n};\n}\n\nfunction TranslationService_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationService.ctorParameters;\n/** @type {?} */\nTranslationService.propDecorators;\n/** @type {?} */\nTranslationService.prototype.translationChanged;\n/** @type {?} */\nTranslationService.prototype.translationError;\n/** @type {?} */\nTranslationService.prototype.serviceState;\n/** @type {?} */\nTranslationService.prototype.loadingMode;\n/** @type {?} */\nTranslationService.prototype.language;\n/**\n * The translation data: {language: {key: value}}.\n * @type {?}\n */\nTranslationService.prototype.translationData;\n/** @type {?} */\nTranslationService.prototype.locale;\n/** @type {?} */\nTranslationService.prototype.configuration;\n/** @type {?} */\nTranslationService.prototype.translationProvider;\n/** @type {?} */\nTranslationService.prototype.translationHandler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ChangeDetectorRef } from '@angular/core';\r\nimport { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { TranslationService } from './translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Provides 'lang' to the translate pipe.\n */\nexport class Translation {\npublic lang: string;\r\n\r\n    protected paramSubscriptions: ISubscription[] = [];\n/**\n * @param {?=} translation\n * @param {?=} changeDetectorRef\n */\nconstructor(\r\n        protected translation: TranslationService = InjectorRef.get(TranslationService),\r\n        protected changeDetectorRef?: ChangeDetectorRef\r\n    ) {\r\n        this.lang = this.translation.getLanguage();\r\n        // When the language changes, subscribes to the event & updates lang property.\r\n        this.paramSubscriptions.push(this.translation.translationChanged.subscribe(\r\n            (language: string) => {\r\n                this.lang = language;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected cancelParamSubscriptions(): void {\r\n        this.paramSubscriptions.forEach((subscription: ISubscription) => {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction Translation_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslation.ctorParameters;\n/** @type {?} */\nTranslation.prototype.lang;\n/** @type {?} */\nTranslation.prototype.paramSubscriptions;\n/** @type {?} */\nTranslation.prototype.translation;\n/** @type {?} */\nTranslation.prototype.changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { Translation } from './translation';\r\nimport { LocaleService } from './locale.service';\r\nimport { TranslationService } from './translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Provides 'lang' to the translate pipe,\r'defaultLocale' & 'currency' to localeDecimal, localePercent & localeCurrency pipes.\n */\nexport class Localization extends Translation {\npublic defaultLocale: string;\npublic currency: string;\n/**\n * @param {?=} locale\n * @param {?=} translation\n * @param {?=} changeDetectorRef\n */\nconstructor(\r\n        protected locale: LocaleService = InjectorRef.get(LocaleService),\r\n        protected translation: TranslationService = InjectorRef.get(TranslationService),\r\n        protected changeDetectorRef?: ChangeDetectorRef\r\n    ) {\r\n        super(translation, changeDetectorRef);\r\n\r\n        this.defaultLocale = this.locale.getDefaultLocale();\r\n        // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n        this.paramSubscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            (defaultLocale: string) => {\r\n                this.defaultLocale = defaultLocale;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n\r\n        this.currency = this.locale.getCurrentCurrency();\r\n        // When the currency changes, subscribes to the event & updates currency property.\r\n        this.paramSubscriptions.push(this.locale.currencyCodeChanged.subscribe(\r\n            (currency: string) => {\r\n                this.currency = currency;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction Localization_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalization.ctorParameters;\n/** @type {?} */\nLocalization.prototype.defaultLocale;\n/** @type {?} */\nLocalization.prototype.currency;\n/** @type {?} */\nLocalization.prototype.locale;\n/** @type {?} */\nLocalization.prototype.translation;\n/** @type {?} */\nLocalization.prototype.changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["type","LocaleService","DecimalCode","_super","locale","_this","call","this","__extends","Object","defineProperty","prototype","get","decimalCodes","minusSign","toUnicode","decimalSeparator","thousandSeparator","IntlAPI","hasNumberFormat","localeValue","Intl","NumberFormat","getDefaultLocale","format","unicodeChars","i","push","charAt","parse","s","value","characters","split","_i","characters_1","length","char","charCode","index","numberCodes","indexOf","NaN","parseFloat","getRegExp","digits","minInt","minFraction","maxFraction","NUMBER_FORMAT_REGEXP","parts","match","parseInt","pattern","zero","nine","toChar","RegExp","NumberCode","decorators","Injectable","ctorParameters","LocaleValidation","decimalCode","parseNumber","Collator","translation","compare","key1","key2","extension","options","usage","sensitivity","hasCollator","value1","translate","value2","addExtension","getCurrentLocale","sort","list","keyName","order","reverse","sortAsync","Observable","create","observer","next","complete","search","keyNames","collator","filter","key","found","searchAsync","valueLength","sLength","str","substr","TranslationService","TranslatePipe","transform","lang","args","Pipe","name","pure","LocaleDatePipe","defaultLocale","hasDateTimeFormat","DatePipe","LocaleDecimalPipe","DecimalPipe","LocalePercentPipe","PercentPipe","LocaleCurrencyPipe","currency","symbolDisplay","CurrencyPipe","BFS","getTargetNode","rootNode","walk","iNode","queue","depth","nodeToDepthIncrease","MAX_DEPTH","shift","isTargetNode","childNodes","_a","child","isValidNode","node","nodeType","nodeValue","trim","attributes","attr","SELECTOR","test","BaseDirective","el","renderer","subscriptions","TEXT_MUTATION_CONFIG","subtree","characterData","ngAfterViewInit","nativeElement","element","renderNode","getKey","getAttributes","addTextListener","setup","ngOnChanges","changes","valueAttribute","innerHTMLProperty","replaceText","replaceAttributes","ngOnDestroy","removeTextListener","cancelSubscriptions","replace","getAttributesData","keys","getAttributesKeys","data","keys_2","getValues","map","setText","setValue","setAttribute","setProperty","setAttributes","MutationObserver","textObserver","mutations","observe","disconnect","getText","_b","_c","targetAttr","forEach","subscription","unsubscribe","propDecorators","Input","TranslateDirective","set","params","translationChanged","subscribe","Directive","selector","ElementRef","Renderer2","l10nTranslate","LocaleDateDirective","defaultPattern","localeDatePipe","defaultLocaleChanged","l10nDate","localeDate","LocaleDecimalDirective","localeDecimalPipe","l10nDecimal","localeDecimal","LocalePercentDirective","localePercentPipe","l10nPercent","localePercent","LocaleCurrencyDirective","localeCurrencyPipe","currencyCodeChanged","getCurrentCurrency","symbol","l10nCurrency","localeCurrency","LocaleNumberValidatorDirective","MIN_VALUE","Number","MAX_VALUE","ngOnInit","validator","validateLocaleNumber","minValue","maxValue","validate","formControl","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","l10nValidateNumber","TranslationModule","injector","forRoot","token","ngModule","InjectorRef","LocaleConfig","LocaleStorage","useClass","localeStorage","BrowserStorage","TranslationConfig","TranslationProvider","translationProvider","HttpTranslationProvider","TranslationHandler","translationHandler","DefaultTranslationHandler","forChild","NgModule","declarations","exports","LocalizationModule","imports","LocaleValidationModule","Language","DecoratorFactory","target","propertyKey","getLanguage","language","targetNgOnInit","apply","targetNgOnDestroy","writable","undefined","DefaultLocale$1","Currency","NUMBER_REGEXP","parsedValue","valid","Injector","languageCodes","storageIsDisabled","localStorage","sessionStorage","LocaleConfigAPI","configuration","addLanguage","languageCode","textDirection","code","direction","addLanguages","languageCodes_1","disableStorage","setCookieExpiration","days","cookiesExpirationDays","useLocalStorage","useSessionStorage","defineLanguage","defineDefaultLocale","countryCode","scriptCode","numberingSystem","calendar","defineCurrency","currencyCode","read","write","hasCookie","navigator","cookieEnabled","hasStorage","Storage","getLocalStorage","getSessionStorage","getCookie","setLocalStorage","setSessionStorage","setCookie","getItem","result","document","encodeURIComponent","exec","cookie","setItem","expires","expirationDate","Date","setTime","getTime","toUTCString","DefaultLocale","_value","parseValue","build","join","extensions","substring","codes","storage","languageCodeChanged","EventEmitter","loadTranslation","Subject","addConfiguration","getConfiguration","init","initStorage","sent","initDefaultLocale","initLanguage","initCurrency","getAvailableLanguages","getLanguageDirection","matchLanguage","getCurrentLanguage","getCurrentCountry","getCurrentScript","getCurrentNumberingSystem","getCurrentCalendar","setCurrentLanguage","sendLanguageEvents","sendTranslationEvents","setDefaultLocale","sendDefaultLocaleEvents","setCurrentCurrency","sendCurrencyEvents","browserLanguage","getBrowserLanguage","matchedLanguages","emit","Output","translationData","localeAsLanguage","keySeparator","i18nPlural","hasIntl","hasOwnProperty","TranslationConfigAPI","addTranslation","assign","addProvider","prefix","dataFormat","addWebAPIProvider","path","addCustomProvider","useLocaleAsLanguage","setMissingValue","missingValue","setMissingKey","missingKey","setComposedKeySeparator","disableI18nPlural","getTranslation","http","url","res","json","Http","handleMissingValue","handleArgs","TEMPLATE_REGEXP","parsedKey","replacer","LoadingMode","Direct","Async","ServiceState","isReady","isLoading","isWaiting","translationError","serviceState","loadingMode","Array","isArray","keys_1","translateKey","translateAsync","values","translateI18nPlural","getValue","sequences","keyText","keyNumber","translateNumber","isNaN","toString","toPromise","releaseTranslation","sequencesOfTranslationData","provider","merge","addData","error","sendEvents","Translation","changeDetectorRef","paramSubscriptions","markForCheck","cancelParamSubscriptions","ChangeDetectorRef","Localization","num","String","fromCharCode","c","toHex","charCodeAt","hex","toUpperCase"],"mappings":"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"}